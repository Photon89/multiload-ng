
noinst_LTLIBRARIES = libmultiload_resources.la


# generate object files from JSON files
.json.$(OBJEXT):
	@echo "  RES     " $@
	@$(LD) -r -E -b binary -o $@ $<


# generate .lo file from .o in the same directory
.$(OBJEXT).lo:
	@echo "# $$(basename $@) - a libtool object file" > "$@"
	@echo "# Generated by $(shell $(LIBTOOL) --version | head -n 1)" >>"$@"
	@echo "#" >>"$@"
	@echo "# Please DO NOT delete this file!" >>"$@"
	@echo "# It is necessary for linking the library." >>"$@"
	@echo >>"$@"
	@echo "# Name of the PIC object." >>"$@"
	@echo "pic_object='$$(basename $^)'" >>"$@"
	@echo >>"$@"
	@echo "# Name of the non-PIC object" >>"$@"
	@echo "non_pic_object='$$(basename $^)'" >>"$@"
	@echo >>"$@"


# explicitly clear sources list (required)
libmultiload_resources_la_SOURCES =

# build resource objects before library itself
libmultiload_resources_la_DEPENDENCIES = \
	themes/arc.$(OBJEXT) \
	themes/default.$(OBJEXT)

# generate libtool object files from resource objects
LIBS = \
	themes/arc.lo \
	themes/default.lo


# symbols list
BUILT_SOURCES = resources.h

resources.h: $(LIBS)
	@echo "  RES      <resources.h>"
	@echo "/* Multiload-ng resources */" > $@
	@echo >> $@
	@echo "// Resource access" >> $@
	@echo "#define ML_RESOURCE_GET(name) (_binary_##name##_start)" >> $@
	@echo "#define ML_RESOURCE_SIZE(name) ((size_t)(_binary_##name##_end - _binary_##name##_start))" >> $@
	@echo >> $@
	@echo >> $@
	@for i in $^; do \
		source_name=$$(echo $$i | sed 's/.lo$$/.json/') ; \
		code_name=$$(echo $$source_name | sed 's/[_/.]/_/g') ; \
		echo "// Resource file original name:           $$source_name" >> $@ ; \
		echo "// Codename (pass it to above macros):    $$code_name" >> $@ ; \
		echo "extern const char   _binary_$${code_name}_start[];" >> $@ ; \
		echo "extern const char   _binary_$${code_name}_end[];" >> $@ ; \
		echo >> $@ ; \
	done


CLEANFILES = $(libmultiload_resources_la_DEPENDENCIES) $(LIBS) $(BUILT_SOURCES)
